
This example is used to show the minimum coding and processing steps
needed to build a minimum Dynace WDS application.

A more complete description of the configuration and build
procedure is located in chapter 3 of the Dynace WDS manual.

Since most of these steps are the same for all Dynace WDS
applications, these instructions will not be repeated for subsequent
examples unless there is something different.


List of original files
----------------------
README		This file - should give information specific to each example.

MAIN.C		The example's source code.

MAIN.TXT	A commented version of MAIN.C.  Note that the comments in
		this file will only reflect the parts which are unique to
		any particular example when compared to previous examples.
		(A good reason to follow the examples in order.)

MAIN.RC		This is the source definitions of all menus, dialogs, icons,
		cursors, etc. used by the application.  It is created and
		maintained by the resource editor which comes with your
		compiler (App Studio in the case of Microsoft).  Note that
		when creating new resource files you should NOT select to
		make this an MFC resource file.

RESOURCE.H	This is a companion file to MAIN.RC.  It is also created
		and maintained by the endemic resource editor.  This file
		contains definitions used by the application to reference
		resources located in MAIN.RC.

MAIN.DEF	This is also a link time file needed by the linker for
		Windows programs.  It supplies stack size and other memory type
		information for the application. (only used in Windows 3.1)

ALGOCORP.ICO	This is the Algorithms Corporation icon and was defined using
		the resource editor.  Since it is the only icon being
		associated with the executable file, it will appear as the
		default application icon.  Also, if it is associated with
		the main window of the application, it will also appear when
		the application is iconized.



List of files created when the example is compiled
--------------------------------------------------

MAIN.OBJ	A compiled version of MAIN.C

MAIN.RES	A compiled (by the resource compiler) version of MAIN.RC.
		It is combined with your final application in order to
		produce a stand alone .EXE file.

MAIN.EX1	A compiled and linked representation of the example minus the
		resources located in RESOURCE.RES.  It is kept around in case
		the resources were changed without an effect on the compiled
		code.  This way a re-link would not be necessary.

MAIN.EXE	This is the final stand alone executable file which includes
		all defined resources.  This is the only file needed to
		run the application.


Building the system with the Microsoft IDE's
--------------------------------------------
Add c:\Dynace\include to your IDE's include path.
Add c:\Dynace\lib to your IDE's library path.

32 bit IDE: use "File" / "Open Workspace" and select "Files of type"
Makefiles (*.mak).  Then just click on "WIN32.MAK" file located in the
desired example.  Then just click ok for all the conversion questions.

16 bit IDE: use "Project", "Open" and select "MAIN.MAK" for the
desired example.




Building the system with the DMAKE utility
------------------------------------------

Your compiler should be installed and configured correctly.  Keep in
mind that Dynace WDS applications are all large memory model.
(Although multiple instances are supported.)  You must add the bin
directory included with the Dynace system into your system's search
path.

The DMAKE utility requires an environment variable set which indicated
where its startup file is located.  Presuming you setup Dynace in
C:\DYNACE the correct value would be as follows:

	set MAKESTARTUP=c:\dynace\utils\startup.mk

Dmake also uses a variable to indicate where temporary files are to be placed.
You set it as follows (presuming the directory c:\tmp exists):

	set TMPDIR=c:\tmp


The following environment variables should be set if you are operating
under DOS or Windows 3.1 (needed by dpp.exe which is a 32 bit extended
app):

	set DOS4G=quiet
	set DOS16M=:4M

The :4M limits dpp's memory usage to 4 MB.  This value is much more
than needed and may be reduced on low memory machines.

In addition to the above, the Borland compiler requires a few additional
configuration steps.  First, the INCLUDE environment variable must be
set in order for the resource compiler to work.  It should be set
something like the following:

	set INCLUDE=d:\bc4\include

Borland users will also have to edit their makefile (B16.DM or B32.DM)
to contain the correct BORLAND_HOME path.

The DMAKE utility is documented in \DYNACE\DOCS\DMAKE.MAN


DMAKE Builds
------------

	dmake -f m16.dm           (to build non-debug 16 bit Microsoft)
	dmake -f m16.dm DEBUG=1   (to build debug 16 bit Microsoft)
	dmake -f m32.dm           (to build non-debug 32 bit Microsoft)
	dmake -f m32.dm DEBUG=1   (to build debug 32 bit Microsoft)

	dmake -f m16.dm clean	  (to remove build files)
	dmake -f m32.dm clean	  (to remove build files)



Running the example
-------------------
Since the example generated is a Windows application, it will not run
directly under DOS.  You must be in Windows (or Windows NT, Windows 95,
or OS/2) to run it.  Simply use the file manager to locate MAIN.EXE
and then either double click it to execute it or drag it into a group
to create an icon out of it.

Under Windows 95 or NT you can just type "main" to execute the program.


Cleaning up garbage files
-------------------------
Once you are through with the example, you may delete all generated files
(including main.exe) with the following command:

	..\setup\clean

This will leave the directory in the original (as shipped) state.
Note, however, that you will have to manually remove any backup files
created by any editor you use.


Note
----
Note that the file ..\list contains the most up-to-date list of example
programs.
