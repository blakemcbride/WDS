

#include "generics.h"
#include "resource.h"

/*  declare forward references  */

static	long	file_message(object wind, unsigned id);
static	long	file_exit(object wind, unsigned id);

int	start()
{
	object	win;
	char	title[80];

	sprintf(title, "My Test Application - %d", 8*sizeof(int));
	win = vNew(MainWindow, title);

	mLoadIcon(win, ALGOCORP_ICON);

	/*  The following line loads a menu defined in RESOURCE.RC (with
	    you compiler vendor included resource editor) and associates it
	    with window win.  The macro IDR_MENU1 is defined in RESOURCE.H
	    (by the resource editor).  IDR_MENU1 is programmer defined at the
	    time the menu is created.  */

	mLoadMenu(win, IDR_MENU1);


	/*  The following line associates the function file_message()
	    (defined in this file) with a menu option labeled ID_FILE_MESSAGE
	    such that whenever a user selects the menu option associated
	    with the ID_FILE_MESSAGE label, the file_message() function will
	    be executed.  The macro ID_FILE_MESSAGE is defined in RESOURCE.H
	    (by the resource editor).  ID_FILE_MESSAGE refers to some leaf
	    node of the menu attached to the window, win, defined by the
	    programmer when the menu was created.  */

	mAssociate(win, ID_FILE_MESSAGE, file_message);

	/*  The following line performs the same function as the line above. */

	mAssociate(win, ID_FILE_EXIT, file_exit);

	return gProcessMessages(win);
}

/*  The following function is automatically executed by the system whenever
    the user selects the appropriate menu option (defined above).  It must
    always have the interface shown.  'wind' is the window object which
    the menu is associated with and id is the selected menu option id.  */

static	long	file_message(object wind, unsigned id)
{
	/*  This call displays a message window with the indicated message.
	    The user must select OK to continue.  */
	
	gMessage(wind, "File Message");

	/*  This should always be the returned value.  */

	return 0L;
}

/*  This next function operates similar to the previous function.  */

static	long	file_exit(object wind, unsigned id)
{
	/*  This next call causes the application to terminate.
	    Note that the Application class is often used to effect options
	    which are related to the application as a whole.  The 0
	    argument ends up being the return value of the application.  */

	gQuitApplication(Application, 0);
	
	return 0L;
}
