

#include "generics.h"
#include "resource.h"

static	long	file_message(object wind, unsigned id);
static	long	file_dialog(object wind, unsigned id);
static	long	file_exit(object wind, unsigned id);

int	start()
{
	object	win;
	char	title[80];

	sprintf(title, "My Test Application - %d", 8*sizeof(int));
	win = vNew(MainWindow, title);

	mLoadIcon(win, ALGOCORP_ICON);

	mLoadMenu(win, IDR_MENU1);
	mAssociate(win, ID_FILE_MESSAGE, file_message);
	mAssociate(win, ID_FILE_DIALOG, file_dialog);
	mAssociate(win, ID_FILE_EXIT, file_exit);

	return gProcessMessages(win);
}

static	long	file_message(object wind, unsigned id)
{
	gMessage(wind, "File Message");
	return 0L;
}

/*  This function is used to tell the system the application specific
    parameters associated with the various controls (entry fields).
    It is called after the dialog is loaded and before it is performed.  */

static	void	init_controls(object dlg)
{
	/*  Declare an object which will hold successive objects which
	    represent associated controls.  */

	object	ctl;
	
	/*  Declare the control labeled FIELD_FIRST_NAME (labeled by the
	    programmer when defining the dialog with the resource editor)
	    of the dialog (dlg) to be a TextControl.  ctl will reference
	    that defined control object.  */

	ctl = mAddControl(dlg, TextControl, FIELD_FIRST_NAME);

	/*  Define the range of characters the user can enter to be from
	    0 to 10 characters.  */

	gTextRange(ctl, 0, 10);


	/*  Define the FIELD_LAST_NAME control to be a TextControl also.  */

	ctl = mAddControl(dlg, TextControl, FIELD_LAST_NAME);

	/*  Set the range of this control to be from 1 to 30 characters.  */
	
	gTextRange(ctl, 1, 30);

	/*  This call indicates that characters entered into control (ctl)
	    should be automatically capitalized as the user enters data.  */
	
	gCapitalize(ctl);
}

/*  This function retrieves data the user entered into the dialog and displays
    it to the main window.  */

static	void	displayValues(object wind, object dlg)
{
	/*  Declare a temporary variable to hold string values.  */

	char	*val;
	
	/*  Get a pointer to a string which represents the value the user
	    entered into dialog (dlg), control FIELD_FIRST_NAME and
	    assign it to val.  */

	val = mCtlStringValue(dlg, FIELD_FIRST_NAME);

	/*  Display the returned value to the main window (wind) using the
	    printf() like utility.  */
	
	vPrintf(wind, "First Name = %s\n", val);

	/*  Get the value associated with the FIELD_LAST_NAME control.  */

	val = mCtlStringValue(dlg, FIELD_LAST_NAME);

	/*  Display it.  */
	
	vPrintf(wind, "Last Name = %s\n\n", val);
}

static	long	file_dialog(object wind, unsigned id)
{
	object	dlg;
	int	r;
	
	dlg = mNewDialog(ModalDialog, DL1, wind);

	/*  Call the function which initializes all the controls within
	    the dialog.  */

	init_controls(dlg);

	r = gPerform(dlg);

	/*  If the user entered valid data and accepted (as apposed to
	    canceling) the dialog then display (or whatever) the data
	    from the fields.  */

	if (r == TRUE)
		displayValues(wind, dlg);

	gDispose(dlg);

	return 0L;
}

static	long	file_exit(object wind, unsigned id)
{
	gQuitApplication(Application, 0);
	return 0L;
}
