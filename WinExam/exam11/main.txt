

#include "generics.h"
#include "resource.h"

static	long	file_report(object wind, unsigned id);
static	long	file_exit(object wind, unsigned id);

int	start()
{
	object	win;
	char	title[80];

	sprintf(title, "My Test Application - %d", 8*sizeof(int));
	win = vNew(MainWindow, title);

	mLoadIcon(win, ALGOCORP_ICON);

	mLoadMenu(win, IDR_MENU1);
	mAssociate(win, ID_FILE_REPORT, file_report);
	mAssociate(win, ID_FILE_EXIT, file_exit);

	return gProcessMessages(win);
}

/*  file_report gets executed whenever the user chooses "Report" from the
    main menu  */

static	long	file_report(object wind, unsigned id)
{
	/*  Declate an object which will hold an object representing the
	    printer.  */

	object	pntr;

	/*  Open the printer by creating an instance of the Printer class.
	    This printer object will have it's message be a child window to
	    window wind and will have the Windows print spooler file called
	    "My Report"  */

	pntr = gOpenDefault(Printer, wind, "My Report");

	/*  If no valid pntr is returned from the above line then there
	    must be no printer configured for this computer - exit.  */

	if (!pntr)
		return 0L;

	/*  Print the text to pntr.  If -1 is returned either the user aborted
	    the print job or there was a system error (disk full?) associated
	    with the output.  If there's an error pntr should be disposed and
	    no more printing.  */

	if (-1 == gPuts(pntr, "This is line one of my output.\n"))
		goto end;


	/*  end: gives a place to jump to in case there is a print error.  */

 end:

	/*  This next line causes the output to actually print and the printer
	    object to be disposed.  */
	
	gDispose(pntr);

	return 0L;
}

static	long	file_exit(object wind, unsigned id)
{
	gQuitApplication(Application, 0);
	return 0L;
}
