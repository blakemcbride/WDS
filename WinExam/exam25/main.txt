

#include "generics.h"
#include "resource.h"

static	long	file_message(object wind, unsigned id);
static	long	file_exit(object wind, unsigned id);
static	long	tool_file_new(object wind, unsigned bm);


/*  Give each section of the status bar it's own ID  */

#define	FIRST_SECTION	1

int	start()
{
	object	win;
	char	title[80];

	sprintf(title, "My Test Application - %d", 8*sizeof(int));
	win = vNew(MainWindow, title);

	mLoadIcon(win, ALGOCORP_ICON);

	mLoadMenu(win, IDR_MENU1);
	mAssociate(win, ID_FILE_MESSAGE, file_message);
	mAssociate(win, ID_FILE_EXIT, file_exit);

	/*  Add bitmap IDB_NEW (as defined by the resource editor) to the
	    toolbar.  Adding the first bitmap causes Dynace to automatically
	    create the toolbar.  The second argument is the bitmap ID, the
	    third argument is the ID of a bitmap to be used when the user
	    depresses the tool.  If it is 0 Dynace will simulate a pressed
	    tool from the first ID.  The forth argument tells how much space
	    to put between each tool, and the fifth argument tells what function
	    to execute when the tool is pressed.  The last argument is a small
	    help text displayed when the user moves the pointer over the bitmap. */
	gAddToolBitmap(win, IDB_NEW, 0, 1, tool_file_new, "New File");

	/*  This adds a section to the status bar.  Adding the first section
	    causes Dynace to automatically create the status bar itself.
	    The status bar may be broken up into as many sections as you
	    wish.  Each section must have a unique ID.  The 40 indicates
	    the width of the section.  DT_CENTER indicates that text written
	    to that section should be centered.  */
	gAddSection(win, FIRST_SECTION, 40, DT_CENTER);

	/*  This tells the system what text to place in the specified
	    status bar section.  It may be changed at any time.  */
	gSetSectionText(win, FIRST_SECTION, "Text in section");


	return gProcessMessages(win);
}

static	long	tool_file_new(object wind, unsigned bm)
{
	gMessage(wind, "New bitmap hit");
	return 0L;
}

static	long	file_message(object wind, unsigned id)
{
	gMessage(wind, "File Message");
	return 0L;
}

static	long	file_exit(object wind, unsigned id)
{
	gQuitApplication(Application, 0);
	return 0L;
}
