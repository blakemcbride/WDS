
Please note that WDS comes with extensive documentation.  Once you
have the system built (following instructions in this file), see:

	manual/WDS.pdf - 300+ pages of documentation on the Windows
	                 development system

	manual/odbcusr.pdf - documentation on the SQL interface

Then there is a Windows development system tutorial at:

	winexam/exam01/readme
	
The Windows Development System (WDS), is a set of Dynace classes that
are built on top of Dynace.  Dynace is independent of WDS and can be
used without it.  WDS itself depends upon the Microsoft Win32 API.
This API is also available on Linux and Mac through the Wine project.

You must build Dynace before any of this will work.

----------------------------------------


Build instructions:

It is assumed that before you try to do anything with WDS, you have 
Dynace up and running.  See https://github.com/blakemcbride/Dynace

There are two sections labeled:

    Windows
    
    Linux, Apple Mac, FreeBSD, Solaris (using WINE)

The system runs fine under 32 and 64 bit Linux as well as 64 bit Mac.
It should run fine with possible minor tweaks to the makefiles.

Assuming DR is your Dynace root directory such as  c:\dynace or ~/Dynace

Go to the appropriate section.


================================================================================

Windows
-------

If you are operating With Cygwin under Windows, use the Linux build
docs below rather than this section.

This procedure will work for 32 and 64 bit builds.

WDS is built from the command line using the nmake build utility that comes
with Microsoft Visual C.

First, make sure that your command line compiler is set up correctly.
You can do this by using the "Visual Studio Command Prompt" that comes
with Visual Studio and is located under "Visual Studio Tools".  I
suggest that you create a "Hello, World" program and compile and link
it from the command line to be sure it's all set up correctly.

All of the following commands should be executed in the root of the
WDS tree.  For example, you should see sub-directories named
ODBC, Windows, WinExam, etc. at this level.

1.  Edit the file named "setupenv.bat".  Change the line which sets
    DYNACE_PATH to be correct for your environment.
    
2.  Setup the build environment by executing the following file:

	setupenv.bat

3.  If your login ID has a period in it, you need to set the TMP
environment variable explicitly as follows:

        set TMP=C:\TEMP
	
or any other suitable location.  If you need to do this, you may want
to update setupenv.bat to reflect this change.

4.  Build the system

	nmake -f makefile.msc makegens
	nmake -f makefile.msc all-scratch
	cd WinExam\setup
	windows

You can test the GUI system as follows:

	cd WinExam\exam10
	nmake -f makefile.msc
	main

--------------------

Learning the system

You can also go to WinExam\exam01 through WinExam\exam25 (in order)
and see the readme file for the GUI Development System / ODBC examples
and tutorial.


The complete manuals in PDF format are in the "manual" directory.

--------------------

Resource Editor

The cld directory contains a GUI dialog designer which produces a
custom resource editor which is loaded at runtime by this system.  To
build use:

	cd cld
	nmake -f makefile.msc

--------------------


Setup for normal, day-to-day use of the system

You may want to do the following:

Add DR\include to your compiler's include search path
Add DR\lib to your linker's library search path



================================================================================

Linux, Apple Mac, FreeBSD, Solaris, and Cygwin under Windows
------------------------------------------------------------

WDS uses the WINE library to support the Win32/Win64 API under
these operating systems.  WINE would have to be installed prior to any
of this working.

Although this port worked in the past, it currently does not for 
reasons we have not yet discovered.  This effort is ongoing.

GNU-make, bash and gcc are assumed.

1.  Build Dynace (seperate package)

2.  Set DYNACE_PATH in the file makefile.inc

3.  Create generics.h with:
	make makegens

4.  Build the system as follows:

	make

	(use the following under Cygwin instead)
		make CYGWIN=1

At this point the language portion of the system is built in the
portable mode.  You can test it by going into examples/exam03,
building and running the example using the following commands:


	export DYNACE_PATH=[full path to Dynace]
	cd examples/exam03
	make
	./main

--------------------

Language Tutorial

After you have everything built and setup you may want to go to
examples/exam01 through examples/exam38 (in order) and see the readme
file for the Dynace language examples and tutorial.


The complete manuals in PDF format are in the "manual" directory.
See manual/Dynace.pdf

--------------------

Building the Windows Development System (utilizing Wine - the Win32
API for Linux / Unix / Mac)

Naturally, you should have Wine installed on the system first.  You
will want the development libraries portion too.

If you now want to build the GUI library under WINE use the following.
This can only be done after the above steps were followed (although
switching to STRAT=-S1 doesn't matter.  It works either way.)

At this point, the system has only been tested on 32 bit machines
(Win32).  If you follow these instructions, the system will be rebuilt
in 32 bit mode even if operating on a 64 bit machine.  Also, if
running on a 64 bit machine, the 32 bit libraries and compiler will
have to be installed.

Make sure the WINEINCPATH is setup correctly in makefile.inc

	cd back to the root of the Dynace tree
	make WINE=1 newgens
	make realclean
	make WINE=1

You can test the GUI system as follows:

	cd WinExam/exam10
	make
	./main

--------------------

Windows Development System tutorial

After you have everything built and setup you may want to go to
WinExam/exam01 through WinExam/exam25 (in order) and see the readme
file for the GUI Development System / ODBC examples and tutorial.


The complete manuals in PDF format are in the "manual" directory.
See manual/WDS.pdf

--------------------

Dialog editor

The cld directory contains a GUI dialog designer which produces a
custom resource editor which is loaded at runtime by this system.  To
build use:

	make

--------------------

Documentation

The complete manuals in PDF format are in the "manual" directory.

See the section above labeled Language Tutorial

================================================================================

Valid Targets
--------------------------------------
all			builds changes
all-scratch		builds everything from scratch
clean			removes intermediate and garbage files
realclean		removes target files too (causes a total rebuild)
dist
makegens		builds generics.h from scratch without pre-processing
newgens			builds generics.h from scratch while pre-processing


wds-all
wds-all-scratch
wds-clean
wds-realclean
wds-makegens
wds-newgens
